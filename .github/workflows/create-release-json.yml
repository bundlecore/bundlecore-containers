# Create release.json for each tool
# This is used while onboarding new tools to bundlecore-containers
# The release.json file contains the repo URL fetched by calling the bundlecore tools API
# The workflow is triggered manually using the workflow_dispatch event
name: Generate release.json for tools

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      attestations: write
      pull-requests: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5


    - name: Set up jq
      run: sudo apt-get install jq


    - name: Loop through tools and create release.json and PR for each tool
      env:
          GHCR_ORG: ${{ github.repository_owner }}
          BCORE_AUTH_TOKEN: ${{ secrets.BCORE_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for dir in bfx/*/; do
          tool_slug=$(basename "$dir")
          release_file="$dir/release.json"
          api_url="https://bundlecore.com/api/tools/${tool_slug}/versions"

          # Fetch API response and status code in one go
          http_response=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: Bearer ${BCORE_AUTH_TOKEN}" \
              -H "Content-Type: application/json" \
              "$api_url")

          # Split response and status code
          status_code=$(echo "$http_response" | tail -n1)
          body=$(echo "$http_response" | sed '$d')

          if [ "$status_code" != "200" ]; then
              echo "Error: API responded with status code $status_code for $tool_slug"
              echo "Response body: $body"
          else
              images=$(echo "$body" | jq -r '.data.versions[].registryUrl' | jq -R -s -c 'split("\n")[:-1]')
              echo "{\"images\": $images}" > "$release_file"
              echo "Updated $release_file with images for $tool_slug"
          fi

          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          branch_name="update-release-json-${tool_slug}"
          git checkout -b "$branch_name"
          git add "$release_file"
          git commit -m "Update release.json for ${tool_slug}"
          git push origin "$branch_name"

          gh pr create --title "Update release.json for ${tool_slug}" \
            --body "This PR updates the release.json file for ${tool_slug}." \
            --base main \
            --head "$branch_name"
        done
