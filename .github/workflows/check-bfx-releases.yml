name: Check BFX Container Releases

on:
    schedule:
        - cron: '0 8 * * *'  # Run at 8:00 AM UTC daily
    workflow_dispatch:  # Allow manual trigger

jobs:
    check-releases:
        runs-on: ubuntu-latest
        permissions:
          contents: write
          pull-requests: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                token: ${{ secrets.GITHUB_TOKEN }}

            - name: Install jq
              run: sudo apt-get install -y jq curl
            - name: Check for new releases
              id: check-releases
              run: |
                #!/bin/bash

                check_quay_tags() {
                    local image_name=$1
                    # Add limit=3 and order by last_modified
                    curl -s "https://quay.io/api/v1/repository/${image_name}/tag/?limit=3&onlyActiveTags=true&orderBy=last_modified" || return 1
                }

                process_release_file() {
                    local file_path=$1
                    local current_images=($(jq -r '.images[]' "$file_path"))

                    if [[ ${#current_images[@]} -eq 0 ]]; then
                        return
                    fi

                    # Extract the repository name from the first image
                    local repo=$(echo "${current_images[0]}" | cut -d':' -f1 | sed 's|quay.io/||')
                    echo "Checking $repo..."

                    local tags_data=$(check_quay_tags "$repo")

                    if [[ $? -eq 0 ]]; then
                        # Get the latest 3 tags sorted by last_modified
                        local latest_tags=$(echo "$tags_data" | jq -r '.tags | sort_by(.last_modified) | .[0:3] | .[].name')
                        local updates_needed=false

                        # Get current image list
                        local image_list=$(jq -r '.images' "$file_path")

                        while read -r tag; do
                            local full_image="quay.io/${repo}:${tag}"
                            if ! printf '%s\n' "${current_images[@]}" | grep -q "^${full_image}$"; then
                                # Add new version to the beginning of images array
                                image_list=$(jq --arg img "$full_image" '. |= [$img] + .' <<< "$image_list")
                                updates_needed=true
                            fi
                        done <<< "$latest_tags"

                        if [[ "$updates_needed" == true ]]; then
                            echo "Updating $file_path with new versions"
                            # Update the release.json file
                            jq --arg images "$image_list" '.images = ($images|fromjson)' "$file_path" > "$file_path.tmp"
                            mv "$file_path.tmp" "$file_path"
                            echo "updates=true" >> $GITHUB_OUTPUT
                            # Also set updates=true in environment for the PR step
                            echo "updates=true" >> $GITHUB_ENV
                        fi
                    else
                        echo "Error fetching tags for $repo"
                    fi
                }

                # Create a new branch for updates
                BRANCH_NAME="update-containers-$(date +%Y%m%d-%H%M%S)"
                git checkout -b "$BRANCH_NAME"
                # Always set the branch name in the environment
                echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV


                # Process all release files
                for prod_slug in bfx/*; do
                    if [[ -d "$prod_slug" ]]; then
                        release_file="$prod_slug/release.json"
                        if [[ -f "$release_file" ]]; then
                            echo "Checking new releases for $(basename $prod_slug)..."
                            # process_release_file will set updates=true in output and env if updates found
                            process_release_file "$release_file"
                        fi
                    fi
                done

                # If updates were found (checked by env.updates), commit and push changes
            - name: Commit changes
              if: env.updates == 'true'
              run: |
                git config --global user.name 'github-actions'
                git config --global user.email 'github-actions@github.com'
                git add bfx/*/release.json
                git commit -m "Update container versions"
                git push origin "$BRANCH_NAME"
                echo "Updates found and pushed to branch $BRANCH_NAME, ready for PR"
            

            - name: Create Pull Request
              if: env.updates == 'true'
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                    const branch = process.env.branch_name; // Access from environment variables
                    const { repo, owner } = context.repo;
                    await github.rest.pulls.create({
                        owner,
                        repo,
                        title: 'Update container versions',
                        head: branch,
                        base: 'main',
                        body: 'This PR updates container versions in release.json files with newly available versions.'
                    });