name: Build and Push Docker Images

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      attestations: write
      pull-requests: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Some of the miit build containers are quite large, so we need to free up some disk space  
    - name: Free Disk Space Before Build
      run: |
        echo "Disk space before cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        echo "Disk space after cleanup:"
        df -h

    - name: Set up jq
      run: sudo apt-get install jq

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Loop through containers
      run: |
        for dir in containers/*/; do
          app_name=$(basename $dir)
          release_file="$dir/release.json"
          version=$(jq -r '.latest_version' $release_file)
          repo_url=$(jq -r '.repo_url' $release_file)
          dockerfile_location=$(jq -r '.dockerfile_location // "Dockerfile"' $release_file) # if not present, default to Dockerfile
          repo_without_dockerfile=$(jq -r '.repo_without_dockerfile // false' $release_file) # if not present, default to false
          echo "Checking for updates for $app_name"

          repo_name=$(echo $repo_url | sed 's/https:\/\/github.com\///; s/\.git$//')
          latest_version=$(curl -s https://api.github.com/repos/${repo_name}/releases/latest | jq -r '.tag_name')
          if [ "$latest_version" == "null" ]; then ## some of the repos do not have releases, so we get the latest tag instead
            latest_version=$(curl -s https://api.github.com/repos/${repo_name}/tags | jq -r '.[0].name')
          fi
          echo "Latest version preset in Github for $app_name is $latest_version"

          if [ "$version" != "$latest_version" ]; then
            echo "Building and pushing Docker image for $app_name"
            echo "should_build=true" >> $GITHUB_ENV
            echo "app_name=$app_name" >> $GITHUB_ENV
            echo "version=$version" >> $GITHUB_ENV
            echo "latest_version=$latest_version" >> $GITHUB_ENV
            echo "repo_url=$repo_url" >> $GITHUB_ENV
            echo "dockerfile_location=$dockerfile_location" >> $GITHUB_ENV
            echo "repo_without_dockerfile=$repo_without_dockerfile" >> $GITHUB_ENV
            break
          else
            echo "Skipping $app_name as the versions are the same"
          fi
        done

    - name: Checkout app repository
      if: env.should_build == 'true'
      run: git clone --branch ${{ env.latest_version }} ${{ env.repo_url }} ${{ env.app_name }}

    - name: Log in to GitHub Container Registry
      if: env.should_build == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      if: env.should_build == 'true'
      id: meta
      uses: docker/metadata-action@v5.7.0
      with:
        images: |
          ghcr.io/${{ github.repository }}/${{ env.app_name }}:${{ env.latest_version }}

    - name: Build Docker image
      if: env.should_build == 'true'
      run: |
        # Check if repo_without_dockerfile is set to true, if so, copy the Dockerfile from the containers/app_name directory
        if [ "${{ env.repo_without_dockerfile }}" == "true" ]; then
          cp containers/${{ env.app_name }}/Dockerfile ${{ env.app_name }}/Dockerfile
        fi
        docker buildx build --output=type=docker --tag ghcr.io/${{ github.repository }}/${{ env.app_name }}:${{ env.latest_version }} -f ${{ env.app_name }}/$dockerfile_location ${{ env.app_name }}

    - name: Push Docker image
      id: push
      if: env.should_build == 'true'
      run: |
        docker push ghcr.io/${{ github.repository }}/${{ env.app_name }}:${{ env.latest_version }}
        image_digest=$(docker image ls ghcr.io/${{ github.repository }}/${{ env.app_name }}:${{ env.latest_version }} --no-trunc -q)
        echo "---- Image digest is $image_digest ----"
        echo "image_digest=$image_digest" >> $GITHUB_ENV

    - name: Sign the published Docker image
      if: env.should_build == 'true'
      uses: actions/attest-build-provenance@v2.2.3
      with:
        subject-name: ghcr.io/${{ github.repository }}/${{ env.app_name }}
        subject-digest: ${{ env.image_digest }}
        # push-to-registry: true

    - name: Update release.json
      if: env.should_build == 'true'
      run: |
        jq --arg version "${{ env.latest_version }}" '.latest_version = $version' containers/${{ env.app_name }}/release.json > containers/${{ env.app_name }}/release.json.tmp
        mv containers/${{ env.app_name }}/release.json.tmp containers/${{ env.app_name }}/release.json

    - name: Commit changes
      if: env.should_build == 'true'
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git checkout -b update-release-json-${{ env.app_name }}
        git add containers/${{ env.app_name }}/release.json
        git commit -m "Update release.json for ${{ env.app_name }} to ${{ env.latest_version }}"
        git push origin update-release-json-${{ env.app_name }}

    - name: Create Pull Request
      if: env.should_build == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { repo, owner } = context.repo;
          await github.rest.pulls.create({
            owner,
            repo,
            title: `Update release.json for ${{ env.app_name }} to ${{ env.latest_version }}`,
            head: `update-release-json-${{ env.app_name }}`,
            base: 'main',
            body: `This PR updates the release.json file for ${{ env.app_name }} to version ${{ env.latest_version }}.`
          });
